{"version":3,"sources":["images/kitel.jpg","files/crizell_resume.pdf","files/crizell_portfolio.pdf","images/art1.JPG","images/art2.JPG","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","pdfStyle","minHeight","width","Resume","react_default","a","createElement","className","src","crizel_resume","style","Portfolio","crizel_portfolio","VectorArts","v1","v2","App","react_router_dom","profile","to","exact","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","console","log"],"mappings":"wFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8SCYlCC,EAAW,CACfC,UAAU,QACVC,MAAM,QAEFC,EAAS,WACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IAAf,KAAoBH,EAAAC,EAAAC,cAAA,UAAQE,IAAKC,IAAeC,MAAOV,MAG1DW,EAAY,WAChB,OAAOP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IAAf,KAAoBH,EAAAC,EAAAC,cAAA,UAAQE,IAAKI,IAAmBF,MAAOV,MAG9Da,EAAa,WACjB,OAAOT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,IAA0BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,IAAKM,MAApD,IAA2DV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,IAAKO,QA8B/EC,MA3Bf,WACE,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,IAAMU,MACjCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,gCAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASE,GAAG,IAAIC,OAAK,GAArB,WACJhB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASE,GAAG,cAAZ,cACJf,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASE,GAAG,eAAZ,kBAIRf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,IAAIF,OAAK,EAACG,UAAWpB,IAChCC,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAWZ,IACrCP,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAWV,QCpC1BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,eCtHnBC,QAAQC,IAAI","file":"static/js/main.ce36b609.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kitel.03e74768.jpg\";","module.exports = __webpack_public_path__ + \"static/media/crizell_resume.af6b8e78.pdf\";","module.exports = __webpack_public_path__ + \"static/media/crizell_portfolio.4453b128.pdf\";","module.exports = __webpack_public_path__ + \"static/media/art1.3045c4d7.JPG\";","module.exports = __webpack_public_path__ + \"static/media/art2.31e2c721.JPG\";","import React from 'react';\nimport { BrowserRouter as Router, Route, NavLink } from \"react-router-dom\";\n\nimport './App.css';\n\nimport profile from \"./images/kitel.jpg\";\nimport crizel_resume from \"./files/crizell_resume.pdf\";\nimport crizel_portfolio from \"./files/crizell_portfolio.pdf\";\n\nimport v1 from \"./images/art1.JPG\";\nimport v2 from \"./images/art2.JPG\";\n\nconst pdfStyle = {\n  minHeight:'100vh',\n  width:'100%'\n}\nconst Resume = () => {\n  return <div className=\"\">  <iframe src={crizel_resume} style={pdfStyle} ></iframe></div>\n}\n\nconst Portfolio = () => {\n  return <div className=\"\">  <iframe src={crizel_portfolio}  style={pdfStyle} ></iframe></div>\n}\n\nconst VectorArts = () => {\n  return <div className=\"vectors\"> <img className='art' src={v1} /> <img className='art' src={v2} /></div>\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Router>\n      <div className=\"banner\">\n      <img className='myprofile' src={ profile }  />\n      <div className=\"title\">Crizell Ann Chavez Famorcan</div>\n      </div>\n      \n      <div className=\"nav\">\n        <ul>\n          <li><NavLink to='/' exact>Resume</NavLink></li>\n          <li><NavLink to='/portfolio'>Portfolio</NavLink></li>\n          <li><NavLink to=\"/vectorarts\">Vector Arts</NavLink></li>\n        </ul>\n      </div>\n\n      <div className=\"content-viewer\">\n       <Route path=\"/\" exact component={Resume} />\n        <Route path=\"/portfolio/\" component={Portfolio} />\n        <Route path=\"/vectorarts/\" component={VectorArts} />\n      </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconsole.log(\"Testing\")"],"sourceRoot":""}